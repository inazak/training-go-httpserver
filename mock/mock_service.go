// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/inazak/training-go-httpserver/entity"
)

// MockListTasksService is a mock of ListTasksService interface.
type MockListTasksService struct {
	ctrl     *gomock.Controller
	recorder *MockListTasksServiceMockRecorder
}

// MockListTasksServiceMockRecorder is the mock recorder for MockListTasksService.
type MockListTasksServiceMockRecorder struct {
	mock *MockListTasksService
}

// NewMockListTasksService creates a new mock instance.
func NewMockListTasksService(ctrl *gomock.Controller) *MockListTasksService {
	mock := &MockListTasksService{ctrl: ctrl}
	mock.recorder = &MockListTasksServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTasksService) EXPECT() *MockListTasksServiceMockRecorder {
	return m.recorder
}

// ListTasks mocks base method.
func (m *MockListTasksService) ListTasks(ctx context.Context) (entity.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTasks", ctx)
	ret0, _ := ret[0].(entity.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTasks indicates an expected call of ListTasks.
func (mr *MockListTasksServiceMockRecorder) ListTasks(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTasks", reflect.TypeOf((*MockListTasksService)(nil).ListTasks), ctx)
}

// MockAddTaskService is a mock of AddTaskService interface.
type MockAddTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockAddTaskServiceMockRecorder
}

// MockAddTaskServiceMockRecorder is the mock recorder for MockAddTaskService.
type MockAddTaskServiceMockRecorder struct {
	mock *MockAddTaskService
}

// NewMockAddTaskService creates a new mock instance.
func NewMockAddTaskService(ctrl *gomock.Controller) *MockAddTaskService {
	mock := &MockAddTaskService{ctrl: ctrl}
	mock.recorder = &MockAddTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddTaskService) EXPECT() *MockAddTaskServiceMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockAddTaskService) AddTask(ctx context.Context, title string) (*entity.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, title)
	ret0, _ := ret[0].(*entity.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTask indicates an expected call of AddTask.
func (mr *MockAddTaskServiceMockRecorder) AddTask(ctx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockAddTaskService)(nil).AddTask), ctx, title)
}
